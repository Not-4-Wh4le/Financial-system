мне нужна помощь с лабораторной работой 
Разработка приложение «Управление финансовой системой», которая позволяет Пользователю выбрать любой банк, который зарегистрирован в системе, авторизоваться в нём под любой ролью и выполнить действия, разрешенные данной роли. 

Требования к системе:
Приложение обязано быть спроектировано с использование паттернов проектирования (порождающих, структурных и поведенческих) и следовать принципам SOLID. Сам проект должен иметь логичную и чистую архитектуру.

Приложение должно выполнять следующие функции*:
1. Имитировать работу банковской системы с возможностями работы с вкладами клиентов:
создание;
хранение;
снятие;
перевод;
накопление;
блокировка;
заморозка.
2. Реализовать возможности выдачи кредитов и рассрочек с индивидуальным и фиксированным процентом переплаты по следующим условиям:
3 месяца;
6 месяцев;
12 месяцев;
24 месяца;
Более 24 месяцев.
4. Реализовать функционал зарплатного проекта для предприятия;
5. Реализовать возможность авторизации пользователей с ролями (приведены обязательные роли, но можно дополнить):
Клиент
может зарегистрироваться в системе (требуется согласие менеджера);
может взаимодействовать со счетами (открывать, закрывать и т.д.);
оформлять кредиты и рассрочки (требуется согласие менеджера);
подать заявку на зарплатный проект от предприятия.
Оператор
может просматривать статистику по движениям средств пользователей и 1 раз отменить** действие по счёту (любой перевод кроме снятия наличных);
подтверждает Заявку на зарплатный проект после получения данных от предприятия.
Менеджер
функционал оператора;
подтверждение кредитов и рассрочек;
отмена** операций произведенным специалистом стороннего предприятия;
Специалист стороннего предприятия
подача документов на зарплатный проект;
запрос на перевод средств другому предприятию или сотруднику его предприятия.
Администратор
Просмотр всех логов действий (логи могут быть в отдельном файле и зашифрованы);
Отмена** всех действий пользователей.

6. Обязательные абстракции: Банк, пользователь, предприятие, счёт, кредит, рассрочка, перевод. Минимальные данные по клиенту:
ФИО;
серия и номер паспорта;
идентификационный номер;
телефон;
email;
предусмотреть возможность работы с иностранными клиентами (желательно отдельный механизм).
Минимальные данные по предприятию:
тип (ИП, ООО, ЗАО и т.д.);
юридическое название;
УНП;
БИК банка;
юридический адрес;

Для демонстрации работы необходимо наполнить систему: 3 банками, 10 предприятиями и 100 клиентами (во всех банках). У предприятия только один банк и много счетов, у клиента может быть много банков и много счетов. Банк может являться предприятием. Разрешается демонстрация работы в консоли, но в таком случае необходимо продумать понятный и простой UX. 

*Данный материал предоставляет лишь минимальные и неполные требования к функционалу проекта.
**Для упрощения работы, можно отменить только два последних действия по каждому пользователю.





Разбиение проекта на подзадачи:
1. Архитектура и проектирование
Определить основные классы и их зависимости (Банк, Пользователь, Предприятие, Счёт, Кредит, Рассрочка, Перевод).

Выбрать подходящие паттерны проектирования (фабричный метод, стратегия, наблюдатель и т. д.).

Разработать ER-диаграмму базы данных.

Настроить SQLite и спроектировать таблицы.

2. Реализация базового функционала
Реализовать систему авторизации и ролей (Клиент, Оператор, Менеджер, Администратор, Специалист стороннего предприятия).

Создать классы для банков и их регистрация в системе.

Реализовать работу со счетами (создание, хранение, снятие, перевод, накопление, блокировка, заморозка).

3. Работа с кредитами и рассрочками
Добавить выдачу кредитов с разными сроками и процентами.

Реализовать механизмы одобрения кредитов менеджером.

Реализовать выплату кредитов и расчет процентов.

4. Зарплатные проекты
Создать функционал подачи заявки от предприятия на зарплатный проект.

Реализовать подтверждение оператором и настройку счетов сотрудников.

Обеспечить перевод зарплат сотрудникам предприятия.

5. Управление операциями
Разработать механизм отмены операций (с ограничением двух последних операций).

Реализовать возможность просмотра статистики по движениям средств.

Добавить просмотр логов администратором.

6. Работа с данными
Наполнить систему тестовыми данными (3 банка, 10 предприятий, 100 клиентов).

Реализовать импорт/экспорт данных (при необходимости).

7. Интерфейс
Разработать консольный интерфейс с удобным UX.

Опционально: рассмотреть возможность создания простого GUI (например, WPF).


/FinancialSystem
│── /FinancialSystem.Core        # Базовые сущности и интерфейсы
│    ├── /Entities               # Основные классы системы
│    │    ├── Bank.cs
│    │    ├── User.cs
│    │    ├── Client.cs
│    │    ├── Enterprise.cs
│    │    ├── Account.cs
│    │    ├── Loan.cs
│    │    ├── Transaction.cs
│    │
│    ├── /Interfaces             # Интерфейсы для абстракций
│    │    ├── IBankService.cs
│    │    ├── IAccountService.cs
│    │    ├── ITransactionService.cs
│    │    ├── ILoanService.cs
│    │
│    ├── /Enums                  # Перечисления
│    │    ├── TransactionStatus.cs
│    │    ├── UserRole.cs
│    │
│    ├── /Exceptions             # Кастомные исключения
│    │    ├── InsufficientFundsException.cs
│    │    ├── UnauthorizedActionException.cs
│
│── /FinancialSystem.Infrastructure  # Работа с БД и реализация сервисов
│    ├── /Data
│    │    ├── AppDbContext.cs
│    │    ├── EntityConfigurations/
│    │
│    ├── /Repositories           # Реализация паттерна Repository
│    │    ├── IBankRepository.cs
│    │    ├── IAccountRepository.cs
│    │    ├── ITransactionRepository.cs
│    │    ├── ILoanRepository.cs
│
│    ├── /Services               # Реализация бизнес-логики
│    │    ├── BankService.cs
│    │    ├── AccountService.cs
│    │    ├── TransactionService.cs
│    │    ├── LoanService.cs
│
│── /FinancialSystem.Application  # Логика приложения (Use Cases)
│    ├── /DTOs
│    │    ├── CreateAccountDto.cs
│    │    ├── TransferRequestDto.cs
│    │
│    ├── /UseCases                # Основные сценарии работы
│    │    ├── RegisterClientHandler.cs
│    │    ├── ProcessLoanHandler.cs
│    │    ├── TransferFundsHandler.cs
│
│── /FinancialSystem.Presentation # Консольный UI / API
│    ├── /ConsoleApp              # Консольное приложение
│    │    ├── Program.cs
│    │    ├── Menu.cs
│    │
│    ├── /WebApi                  # Опционально, если будет API
│    │    ├── Controllers/
│
│── FinancialSystem.sln           # Solution-файл проекта
